<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Young Zhu</title>
  
  <subtitle>Be All You Can Be !</subtitle>
  <link href="/essays/atom.xml" rel="self"/>
  
  <link href="http://youngzy.com/essays/"/>
  <updated>2017-09-24T02:02:06.000Z</updated>
  <id>http://youngzy.com/essays/</id>
  
  <author>
    <name>youngzy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的时间管理之路</title>
    <link href="http://youngzy.com/essays/2017/09/24/manage-your-focus-not-time/"/>
    <id>http://youngzy.com/essays/2017/09/24/manage-your-focus-not-time/</id>
    <published>2017-09-24T01:33:10.000Z</published>
    <updated>2017-09-24T02:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u4ECEGTD_u8BF4_u8D77"><a href="#u4ECEGTD_u8BF4_u8D77" class="headerlink" title="从GTD说起"></a>从GTD说起</h2><p>一直有听播客的习惯，只听《Open Language》。年初（1月5号，截图）她们发布了一集《新年10本实用好读的英语书！》，里面提到了《Getting Things Done》，赞誉满满，刚好自己也有这方面的需求觉得要提高一下，就打算找来看看。买了原版的电子书。（其实里面提到的第一本书《习惯的力量》也看了，不过没看原版，看了中文版的）</p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201709/GTD_01.PNG" class="[class names]" title="[20] [35] [Open Language [Open Language]]"><p>gtd 截图</p><p>原版大致都能看懂，也根据理解对自己现有的系统做了优化，但有些觉得没理解透。所以看完原版后又找来了中文版。我是在“微信读书”上看的，阅读的过程中看到有位书友有条评论，说叶武滨的《时间管理》不错，可以去听听。（这也是我喜欢“微信读书”的原因，读者可以针对某一段或者一句话发表自己的想法和评论）所以在我的清单里加了一条，如图</p><p>我没有立即去找来听，因为当时正在听《鬼吹灯》，还没听完。。。</p><h2 id="u300A_u65F6_u95F4_u7BA1_u7406_u300B_u5BF9_u6211_u7684_u5F71_u54CD"><a href="#u300A_u65F6_u95F4_u7BA1_u7406_u300B_u5BF9_u6211_u7684_u5F71_u54CD" class="headerlink" title="《时间管理》对我的影响"></a>《时间管理》对我的影响</h2><h3 id="u8DD1_u6B65"><a href="#u8DD1_u6B65" class="headerlink" title="跑步"></a>跑步</h3><p>我是八月初开始听《时间管理100讲》的，准确地说是八月二号，因为我有记录。<br>听了当天就重新拾起了跑步。下班路上听的，回到家就换换衣服出去跑步了。<br>本来也有跑步的习惯，或许不能叫习惯。曾经持续早上跑过，也试过晚上的，最长的大概坚持了两三个月。近两年只是周末跑，如果没事并且天气允许的话。（翻了以前的日记，应该是15年去香港的影响，下午三四点到晚上十一二点都能见着跑步的人，在维港和平顶山。早上没有吗？我不知道，因为我还没起来。）<br>边跑边听喜马拉雅，也更坚定了我每天跑步的决心。整个八月跑了14/31天，共计52KM。<br>图<br>在此期间，<strong>突破了人生的第一个5KM。</strong><br>图-朋友圈<br>也制定了一个马拉松计划，如图-dayone</p><h3 id="u6668_u95F4_u65E5_u8BB0"><a href="#u6668_u95F4_u65E5_u8BB0" class="headerlink" title="晨间日记"></a>晨间日记</h3><p>听完了100讲，没太犹豫就购买了付费课程《时间管理十堂课》，光是让我重拾跑步并突破了五公里就已经值回票价了。<br>随后也加入了微信群，刚进去就看到有人在讨论“晨间笔记”。之前虽常听叶老师提，但也没太注意。<br>我也有写日记的习惯，是从这一篇博文（点击跳转）开始的，之前也会写写反思感悟。统计了下，在日记软件Day One（下一节<strong>工具</strong>中会提到）中，截至2017年9月15，日记类287篇，共计390篇，包括了读书笔记等。<br>群里面在聊着模板，就打开看看呗。觉得还挺好看，除了那广告部分，哈哈。于是就想试一下。也许就像叶老师说的“人都有填格子的欲望”吧。<br>印象笔记我之前也用，用来做做剪藏，导出读书笔记（多看）等。<br>导入模板后，修修改改，就成了现在这个样子了，从开始还没断过。<br>图-模板</p><h2 id="u6211_u7684_u5DE5_u5177"><a href="#u6211_u7684_u5DE5_u5177" class="headerlink" title="我的工具"></a>我的工具</h2><p>一直比较关注所谓“效率类工具”。尝试了很多，也放弃了很多。<br>兜兜转转，反反复复，最终留下来的就是这几个。</p><h3 id="u65E5_u5386"><a href="#u65E5_u5386" class="headerlink" title="日历"></a>日历</h3><p>日历主要是用来记录特定日期或时间必须发生的事，例如周三下午三点到四点开会，周六早上八点的车次或者航班，周一老妈生日，等等。</p><ul><li><p>Calendars 5（iOS）<br>  最初看上它是因为三点：一，可以同时展示Event（事件）和Todo（待办事项）；二，有周、月视图，主要是月视图，可以纵览本月计划的事件；三，可用自然语言录入Event和Todo。<br>  结合第一点和第二点，现在主要用来查看行程。至于第三点录入，已被下面的Fantastical替代。</p></li><li><p>Fantastical（iOS&amp;macOS）<br>  用它主要是因为其强大的输入功能。<br>  例如，<br>  xxx</p><p>  在iOS上，主要用于输入。查看并不太方便，限于屏幕大小它是列表的形式，没有周、月视图。<br>  <em>注：这里指的是iPhone，iPad没有用过。</em><br>  而macOS上，既有强大的录入功能，又有周、月等视图，很方便，是Mac上主要的日历工具。</p></li><li><p>Google Calendar<br>  主要是因为颜值。它有添加事件（Event）、提醒（Reminder）和目标（Goal）的功能，我主要用“目标”功能，例如添加“每天写晨间日记”的目标，它会根据你的完成情况，智能地提醒你（根据你写日记的时间猜测下次写可能是什么时间）。</p><p>  图GC</p></li></ul><ul><li>中华万年历<pre><code>主要是用来看看农历，记录家人朋友的生日，毕竟我们生日之类的用的还是农历的。还有些节气，虽然不太关注。</code></pre>  值得一提的是，它每天都有一张美图，配上比较励志或者美好的句子。每天的图片大部分还是挺漂亮挺喜欢的。</li></ul><h3 id="u6E05_u5355"><a href="#u6E05_u5355" class="headerlink" title="清单"></a>清单</h3><p>清单主要是用来记录没有明确时间要求的事件（区别于日历），例如我要爬雪山，我要去西藏，我要听一次演唱会……大到这些人生愿望。记录下这些，时不时地看一看，找到前进的方向，有目标了才更有动力。就像开车，有个导航，时不时地提醒自己是不是还走在通往目的地的路上，有没有偏离方向。<br>小到买日用品，快用完了但还不急着买的，例如牙膏，酱油等。记录下来就是为了防止到时候一下记不起那么多东西，到时候打开一看就知道了。<br>这类事件，我用Things。</p><ul><li><p>Things<br>  可以用来记录普通（单独）的一件事，例如写下“<a href="http://youngzy.com/“，是为了提醒自己，有空的时候浏览下这个网站。">http://youngzy.com/“，是为了提醒自己，有空的时候浏览下这个网站。</a><br>  也可以把一类相关的事放在一起，软件里称为”项目“（Project），到时候方便查找，例如你的读书清单。你可以建一个项目，叫“Book List”，发现了一本好书自己想读但暂时没时间的你就可以把它添加到这里，等你有时间了就翻开这个项目，里面都是你曾经感兴趣的书，这样就不会有书荒了。</p><p>  还有一个，它叫做区域（Area），主要是用来把“项目”归到一类里的，就像把一些单独的Todo归为一类叫项目，把相关的项目归为一类就是区域了，可以分为工作、生活等，根据自己的实际情况来，不用也没关系。</p></li></ul><p>画图，三者关系</p><h3 id="u6536_u96C6"><a href="#u6536_u96C6" class="headerlink" title="收集"></a>收集</h3><p>捕捉脑袋里稍纵即逝的想法，一句话，一个点子……常常会有这样的体验，脑海中闪过一个念头，觉得挺好，但没有立刻记录下来，过一会儿（可能一分钟）再去回想已经记不起来了，怎么想都想不起来，这时就开始责怪自己为什么不当时就写下来呢？</p><ul><li><p>Drafts<br>  选这个是因为它小且快，启动记录很快很方便。灵光一闪，当你打开某个记录App，在等待它转圈圈的过程中，灵光可能闪没了。。。尴尬不？</p><p>  他还有很多扩展功能，例如Things，Evernote等。它可以直接把你的一条记录添加到Things里变成一个待办事项。</p><p>  多说一句，语音输入也不错。一开始是不支持中文的，最近发现，也能识别中国话了。</p></li></ul><h3 id="u65E5_u8BB0"><a href="#u65E5_u8BB0" class="headerlink" title="日记"></a>日记</h3><p>有太多人说写日记的重要性了，很多在世人看来很牛X的人。<br>神一时半会儿学不了，可以先学学形啊。依样学样，学着学着说不定就从形似变成神似了呢！</p><ul><li><p>Day One</p><p>  最初选择它有两个原因：一，支持Markdown；二，有月视图，一眼就可以看出这个月有哪些天写东西了。<br>  缺点：对图片支持不太好。<br>  图-月视图</p></li><li><p>Evernote</p><p>  这是最早接触的日记类App了，用来做收集写总结。后来之所以放弃用它来写东西，是因为<strong>它不支持Markdown</strong>，格式调整不是很方便。为此，我还特意购买了“马克飞象”的服务（其支持Markdown写作，然后同步到Evernote中），记得这是我第一次花钱买服务类产品。<br>  用了Day One后，Evernote主要就用来做做网页剪藏之类的了。</p></li></ul><p>路还很长，漫漫而求索。<br>最后贴上一张近期整理的思维导图。</p><h2 id="u521A_u8FC7_u6765_u6CA1_u591A_u4E45_u7684_u8FC7_u6765_u4EBA_u7684_u5EFA_u8BAE"><a href="#u521A_u8FC7_u6765_u6CA1_u591A_u4E45_u7684_u8FC7_u6765_u4EBA_u7684_u5EFA_u8BAE" class="headerlink" title="刚过来没多久的过来人的建议"></a>刚过来没多久的过来人的建议</h2><p>作为一个刚过来没多久的过来人，给点小小的建议：<strong>不要高估自己，不要把目标定的太高。</strong><br>一旦预订的目标没有达成，会使你对自己的那套系统失去信任。你会觉得没完成也没什么大不了嘛，下一次对待日历或者清单上的事就没那么郑重了。渐渐地，你的系统就会形同虚设，你还是会回到过去，仅依靠你的大脑（CPU）去完成事务。<br><strong>完成少量的目标，再根据实际情况增加，要好过没有完成预订目标再去无奈地推迟减少。</strong><br>对你的系统越信任，它越能发挥作用。<br>信任指的是，你知道一切尽在掌握，尽在你的系统里。<br>它就是你的人生导航！<br>就像你要开车去往一个遥远的目的地，走在完全陌生的路上，没关系，你有导航，它会带你到达目的地。中间可能会有冤枉路，但你的导航会帮你重新规划路线。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;u4ECEGTD_u8BF4_u8D77&quot;&gt;&lt;a href=&quot;#u4ECEGTD_u8BF4_u8D77&quot; class=&quot;headerlink&quot; title=&quot;从GTD说起&quot;&gt;&lt;/a&gt;从GTD说起&lt;/h2&gt;&lt;p&gt;一直有听播客的习惯，只听《Open Language
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="GTD" scheme="http://youngzy.com/essays/tags/GTD/"/>
    
      <category term="时间管理" scheme="http://youngzy.com/essays/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>拥抱失败 —— 读 Soft Skills</title>
    <link href="http://youngzy.com/essays/2017/04/06/embrace-failure/"/>
    <id>http://youngzy.com/essays/2017/04/06/embrace-failure/</id>
    <published>2017-04-06T12:57:20.000Z</published>
    <updated>2017-04-06T13:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一本完全读完的英文书籍。<br>想写这篇读书笔记的时候，书还没读完，不过也快了。当真正开始写的时候，书已经读完了。<br>在写这篇之前，先写了《说说读书笔记》（<a href="http://youngzy.com/ref.html?ref-url=http://youngzy.com/essays/2016/12/22/making-notes-while-reading/">http://youngzy.com/ref-notes</a>），说明／记录一下为什么会有这样的一篇笔记。<br>本来是打算读完第二遍的时候再写读书笔记的。这是本好书，但由于我英文读物读的不多，看着不是太流畅，觉着读第二遍的时候应该会更有把握。<br>但是，就像《说说读书笔记》里提到的，为什么一本书只能有一篇读书笔记呢？我可以针对不同的主题写写我自己的感受啊。</p><p>先说说失败。<br>在该书接近尾声的时候，作者说他要给出最后一个建议，这个建议可能比书中其他的建议更有用，更能让人受益。<br>那就是拥抱失败。<br>因为生活中难免会受到挫败。没有人能够在每一次尝试新事物时都取得成功。<br>既然失败在所难免，那么就要学会去面对它。<br>光面对还不够，还要主动去找它。去做那些你曾经想做却又不敢做的事情，甚至去尝试一些注定会失败的事。<br>即所谓的“走出舒适区”。</p><ol><li>害怕失败是人的天性。可是不必感到沮丧，它是可以克服的。</li><li>失败不代表完了。失败是暂时的。<br> 玩过游戏吧？你是喜欢那种一玩就通关的，还是那种惊险刺激却经常闯关失败的？答案显而易见。失败后你会去追求更高的积分或等级。想想你最终战胜终极BOSS时的兴奋感和成就感。<br> 生活也一样。</li><li>失败是通往成功的必经之路。就像爱迪生说的，在他发现钨丝灯泡之前“成功”地发现了几百种不适合做灯丝的金属。</li><li>拥抱失败。如何做到呢？首先你要知道失败是生活的一部分，它是不可避免的。其次，失败并不可怕。失败了也没多大关系。最后，多去经历失败，经历的多了也就习惯了，到那时就不会害怕失败了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我第一本完全读完的英文书籍。&lt;br&gt;想写这篇读书笔记的时候，书还没读完，不过也快了。当真正开始写的时候，书已经读完了。&lt;br&gt;在写这篇之前，先写了《说说读书笔记》（&lt;a href=&quot;http://youngzy.com/ref.html?ref-url=http://y
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://youngzy.com/essays/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>何谓人脉？</title>
    <link href="http://youngzy.com/essays/2017/02/16/about-network/"/>
    <id>http://youngzy.com/essays/2017/02/16/about-network/</id>
    <published>2017-02-16T14:01:36.000Z</published>
    <updated>2017-02-16T14:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>看了一篇文章（<a href="http://youngzy.com/ref.html?ref-url=https://simpleprogrammer.com/2013/06/24/3-easy-ways-to-market-yourself-as-a-software-developer/">http://youngzy.com/ref-about-network</a>），里面讲到人脉。<br>他说人脉是指<strong>你能为其提供帮助的人，而不是能给你提供帮助的人</strong>。<br>当然，最终你帮助的人也会帮助你。</p><p>今天听播客，又想起了/应证了这种看法。<br>《潘吉Jenny告诉你》，是一款教别人英语的播客节目。Jenny是中国人，留过学，创始人。其他主播都是外国人，native speaker，至少是留过学的，英文比中文要好。<br>现在的同事都是因为之前给他们提供过“帮助”，现在反过来给她提供“帮助”（给她打工）。<br>两个男主播，一个美国人，一个加拿大人，之前都听过Jenny的另一款产品 —— 教外国人学中文。<br>一个女主播，中国人，留过学，英文比中文好，听现在这个节目来学中文。</p><p><strong>想积攒人脉，得先对外提供一些有价值/有意义的东西。</strong></p><p>公众号也是这个套路。<br>先提供一些有价值的内容，然后一群受众就聚集在一起，打个赏什么的。群主要是打个广告什么的，购买转化率也高。</p><p>人脉有了，个人品牌也就有了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了一篇文章（&lt;a href=&quot;http://youngzy.com/ref.html?ref-url=https://simpleprogrammer.com/2013/06/24/3-easy-ways-to-market-yourself-as-a-software-
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>读KK关于未来的演讲有感</title>
    <link href="http://youngzy.com/essays/2017/01/17/about-the-futrue-from-kk/"/>
    <id>http://youngzy.com/essays/2017/01/17/about-the-futrue-from-kk/</id>
    <published>2017-01-17T02:56:54.000Z</published>
    <updated>2017-01-17T03:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>早上看了一篇关于KK（凯文·凯利）演讲的文章（<a href="http://youngzy.com/ref.html?ref-url=http://mp.weixin.qq.com/s/6Og9thK6B0VPZ8H91EeOiw">http://youngzy.com/ref-about-the-future</a>）。有点小感触。</p><h2 id="1-__u98A0_u8986_u5F80_u5F80_u6765_u81EA_u5176_u4ED6_u9886_u57DF"><a href="#1-__u98A0_u8986_u5F80_u5F80_u6765_u81EA_u5176_u4ED6_u9886_u57DF" class="headerlink" title="1. 颠覆往往来自其他领域"></a>1. 颠覆往往来自其他领域</h2><p>80年代，IBM有最先进的技术，最强大的计算机。但他们只重视商用，不重视个人，最终被重视个人机（PC）的微软颠覆。<br>微软在PC领域成了全球主宰，很多公司试图与其竞争，但都失败了。</p><p>同样，微软在其主宰的领域也忽略了其他创新，例如搜索。谁会在乎搜索呢？几乎没人在乎，除了Google。<br>搜索引擎是来自软件领域外界的一种技术。<br>从某种意义上讲，Google并没有在<strong>最初</strong>就与微软在软件领域竞争，而是独辟蹊径创造出另外的技术，从外界颠覆了微软。</p><p>那将来会有谁来颠覆Google呢？<br>KK大胆预言：能颠覆Google的肯定不是一家搜索引擎公司。</p><h2 id="2-__u5F3A_u8C03_u4F7F_u7528_u6743_uFF0C_u800C_u4E0D_u662F_u6240_u6709_u6743"><a href="#2-__u5F3A_u8C03_u4F7F_u7528_u6743_uFF0C_u800C_u4E0D_u662F_u6240_u6709_u6743" class="headerlink" title="2. 强调使用权，而不是所有权"></a>2. 强调使用权，而不是所有权</h2><p>所有权的重要性在下降。<br>Facebook是全球最大的媒体公司，但是它自己不创造内容；阿里巴巴是全球最大的零售商、零售平台，但它却没有自己的库存。</p><p>不用买实体唱片了，因为Spotify上面都有；也不用买纸质书了，因为亚马逊上都可以下载。<br>所有权意味着可靠，你需要去存储这些资产，要去维护，要去升级，还要随时打理它。<br>拥有一个资产会有很多麻烦。<br>但使用权就简单得多，你只管去使用，其他的就让它的”所有者“去处理。</p><p>不光是这些虚拟资产，实体资产也可以分享。例如服装类（婚纱礼服），可以采用租赁的方式，而不是购买。</p><p>看到这个理念让我想起了刚看到的一个叫SetApp的服务。由于Mac上的很多App都很贵，这个服务提供的就是某些App的使用权，你不用去购买这个App就能使用它。当然你是需要支付服务费的，或者叫订阅费。<br>正在尝试中，不知道好不好用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早上看了一篇关于KK（凯文·凯利）演讲的文章（&lt;a href=&quot;http://youngzy.com/ref.html?ref-url=http://mp.weixin.qq.com/s/6Og9thK6B0VPZ8H91EeOiw&quot;&gt;http://youngzy.com/
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>说说读书笔记</title>
    <link href="http://youngzy.com/essays/2016/12/22/making-notes-while-reading/"/>
    <id>http://youngzy.com/essays/2016/12/22/making-notes-while-reading/</id>
    <published>2016-12-22T12:49:31.000Z</published>
    <updated>2016-12-22T12:56:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>导读</strong><br>如果你想知道读书笔记的精确定义……我也想知道。我搜过，没找着。<br>如果你想知道读书笔记怎么写……对不起，我也不知道。<br>这只是一篇关于读书笔记的碎碎念。</p></blockquote><p>一直有这么个计划，也是给自己的一个规定 —— 读完一本书就写一篇读书笔记，并发表一篇书评（如果条件允许的话。例如在“多看”上，方便别人参考。因为自己在买书时，也会看别人的评论）。为此，每开始读一本书都会在Day One中新建一篇标题为<em>读《XXX》</em>的日记，用来记录读某本书时突然冒出来的想法或感悟。当这本书读完时，再用这些想法／感悟来完成这篇读书笔记。<br>效果并不好。<br>每当读完一本书，想静下来写一篇读书笔记的时候，总是感觉无字可写，不知道从哪开始。即使是参考着<em>读《XXX》</em>的日记。日记里的东西过于零碎，有时可能只是一句话，甚至一两个词。而且这些东西并不连贯，不能为了写一篇文章而把它们硬拼在一起。<br>忽然有一天，脑子里蹦出了个想法，或者叫问题：为什么一本书只能有一篇读书笔记呢？</p><p>过去过于执念了。<br>一本书只能有一篇读书笔记。<br>读书笔记一定要等整本书读完了才写。<br>我也不知道这样的想法是怎么来的。</p><p>书评也许是应该等看完了写。但读书笔记就不一定了。<br>想通这点后，有一种豁然开朗的感觉：以前干嘛一定要那样呢？完全可以这样的嘛。</p><p>这些都是在看了一本书的其中一个章节后想到的。看了那章后，感触挺多，想着既然话这么多，可以写篇博客啊。也算是一篇读书笔记。<br>又想起了一个TED演讲 —— 如何成为一个更好的交谈者（<a href="http://youngzy.com/ref.html?ref-url=http://open.163.com/movie/2016/3/F/E/MBFLN6BJF_MBFLNJGFE.html">http://youngzy.com/ref-ted-blog</a>），里面说：如果你想表达自己的想法，又不想留下任何机会让人回应、争论、反驳或阐释，那么就去写博客吧。<br>。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;导读&lt;/strong&gt;&lt;br&gt;如果你想知道读书笔记的精确定义……我也想知道。我搜过，没找着。&lt;br&gt;如果你想知道读书笔记怎么写……对不起，我也不知道。&lt;br&gt;这只是一篇关于读书笔记的碎碎念。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://youngzy.com/essays/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML静态页面如何传递／获取参数？（已解决）</title>
    <link href="http://youngzy.com/essays/2016/12/11/how-to-get-param-in-static-html-page/"/>
    <id>http://youngzy.com/essays/2016/12/11/how-to-get-param-in-static-html-page/</id>
    <published>2016-12-11T03:11:51.000Z</published>
    <updated>2016-12-11T04:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h2><p>想实现这样一个功能：打开一个静态HTML页面<strong>A</strong>，让它自动跳转到页面<strong>B</strong>。</p><h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><p>怎么实现呢？</p><p>习惯了JSP之类的传参（Request、Session等），忽然想用静态的HTML页面，不知道怎么用了。</p><p>比较容易想到的就是通过URL传参，<code>A.html?ref-url=B.html</code> 。<br>怎样才能取到这个<code>ref-url</code>的值呢？<br>字符串……split？<br>会不会太low？<br>应该有更简洁的办法吧。</p><p>网上搜了搜（见文末参考部分），有主意了。<br>还是通过URL，但不是用split，而是用正则表达式。</p><h2 id="u793A_u4F8B"><a href="#u793A_u4F8B" class="headerlink" title="示例"></a>示例</h2><p>A.html的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">title</span>&gt;</span>Young Zhu<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里的 search ，会返回URL里?后面的字符串，包括?本身</span></span><br><span class="line">        <span class="keyword">var</span> queryStr = <span class="built_in">window</span>.document.location.search;</span><br><span class="line">        <span class="comment">//alert(queryStr);</span></span><br><span class="line">        <span class="keyword">var</span> url = (queryStr.match(<span class="regexp">/(=)[^&amp;]*/g</span>))[<span class="number">0</span>].substr(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//alert(url);</span></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="built_in">window</span>.location.href=getURL();</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用浏览器打开 A.html，在地址栏现有的内容后面加上以下内容：<code>?ref-url=B.html</code> 。<br>注意：</p><ol><li>本例中参数名不重要，因为正则表达式是要取<strong>=</strong>后面的内容。</li><li>为了方便，只写了<em>B.html</em>，测试时请换成真实路径，或者换成其他的网址，例如某DU。</li></ol><h2 id="u77E5_u8BC6_u70B9"><a href="#u77E5_u8BC6_u70B9" class="headerlink" title="知识点"></a>知识点</h2><ol><li><p>获取URL后面的传参字符串</p><pre><code>window.document.location.search</code></pre><p> 原来还专门有这样的一个属性 <strong>search</strong>，而不用自己去解析。</p></li><li><p>正则表达式</p></li><li>页面重定向<pre><code>window.location.href=new-url;</code></pre></li></ol><hr><p>参考</p><ul><li>js获取url参数值<a href="http://youngzy.com/ref.html?ref-url=http://www.cnblogs.com/jiekk/archive/2011/06/28/2092444.html">(http://youngzy.com/ref-html-params)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;u9700_u6C42&quot;&gt;&lt;a href=&quot;#u9700_u6C42&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;想实现这样一个功能：打开一个静态HTML页面&lt;strong&gt;A&lt;/strong&gt;，让它自动跳转到页面&lt;s
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="HTML" scheme="http://youngzy.com/essays/tags/HTML/"/>
    
      <category term="javascript" scheme="http://youngzy.com/essays/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>多线程与线程安全（实例讲解）</title>
    <link href="http://youngzy.com/essays/2016/11/27/multi-thread-and-thread-safe/"/>
    <id>http://youngzy.com/essays/2016/11/27/multi-thread-and-thread-safe/</id>
    <published>2016-11-27T03:58:15.000Z</published>
    <updated>2016-11-27T07:42:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么情况下需要关注线程安全问题？<br>就是多个线程会对某个变量同时执行读／写操作的时候。</p><h1 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h1><p>举个常用但没太注意过的例子 —— <strong>SimpleDateFormat</strong> 类。<br>这个类是JDK里面封装的，用来对日期进行格式化。提供 <code>parse(String dateStr)</code>, <code>format(Date date)</code> 等方法。</p><blockquote><p>注：上面提到的方法都在其父类 DateFormat 中。</p></blockquote><p>翻开源代码就会发现，它有一个实体变量 <code>calendar</code> （也是在父类 DateFormat 中）。上面提到的 parse 、format 等方法会对这个变量执行 clear() 、set…(…) 等操作（具体操作请查看源代码）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormat</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Format</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * The &#123;@link Calendar&#125; instance used for calculating the date-time fields</span><br><span class="line">     * and the instant of time. This field is used for both formatting and</span><br><span class="line">     * parsing.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;Subclasses should initialize this field to a &#123;@link Calendar&#125;</span><br><span class="line">     * appropriate for the &#123;@link Locale&#125; associated with this</span><br><span class="line">     * &lt;code&gt;DateFormat&lt;/code&gt;.</span><br><span class="line">     * @serial</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Calendar</span> calendar;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，如果有一个类型为 SimpleDateFormat 的公共变量，就要小心了，这个变量不是线程安全的，多个线程间的数据可能会串了…几乎是一定会串。</p><p>例如，有这样一个日期的工具类，就是将日期转换成特定的字符串格式。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> *</span><br><span class="line"> * @author by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.DateUtil</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PATTERN_YMD = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String getFormattedDate(Date <span class="keyword">date</span>) &#123;</span><br><span class="line">formatter.applyPattern(PATTERN_YMD);</span><br><span class="line"><span class="keyword">return</span> formatter.format(<span class="keyword">date</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是测试类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 测试类</span><br><span class="line"> *</span><br><span class="line"> * @author by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.Main</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="comment">// 昨天的日期</span></span><br><span class="line">Calendar calYesterday = Calendar.getInstance();</span><br><span class="line">calYesterday.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">calYesterday.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">ShowDate yesterday = <span class="keyword">new</span> ShowDate(<span class="string">"YESTERDAY"</span>, calYesterday.getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 今天的日期</span></span><br><span class="line">ShowDate today = <span class="keyword">new</span> ShowDate(<span class="string">"TODAY"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(yesterday);</span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(today);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * start() </span><br><span class="line"> * 它的作用是启动一个新线程，新线程会执行相应的run()方法。start()不能被重复调用。</span><br><span class="line"> * run() </span><br><span class="line"> * 就和普通的成员方法一样，可以被重复调用。单独调用s的话，会在当前线程中执行run()，而并不会启动新线程！</span><br><span class="line"> */</span></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个线程类：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 一个简单的线程的实现类</span><br><span class="line"> *</span><br><span class="line"> * @author by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.ShowDate</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowDate</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">private</span> Date <span class="keyword">date</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ShowDate(String <span class="keyword">desc</span>, Date <span class="keyword">date</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">desc</span> = <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">date</span> = <span class="keyword">date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">30</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">500</span>L);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="keyword">desc</span> + <span class="string">": "</span> + DateUtil.getFormattedDate(<span class="keyword">date</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照设想，以今天（2016-11-27）为例，应该是 <strong>YESTERDAY: 2016-11-26</strong> 和 <strong>TODAY: 2016-11-27</strong> 这两个字符串交叉着，各自打印 1000 遍。<br>可事实是这样吗？<br>运行一下看看。<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201611/thread.png" alt="截图" title="测试类运行结果截图"><br>结果简直惨不忍睹，第一行就出错了（当然，这个可能需要一定的“运气”）。“今天”一会儿 26，一会儿 27。“昨天”也一样，一会儿 26，一会儿 27。<br>这就是线程不安全导致的问题了。<br>该怎么解决呢？?</p><h1 id="u89E3_u51B3_u529E_u6CD5_uFF08_u4E00_uFF09__u2014_u2014_synchronized"><a href="#u89E3_u51B3_u529E_u6CD5_uFF08_u4E00_uFF09__u2014_u2014_synchronized" class="headerlink" title="解决办法（一） —— synchronized"></a>解决办法（一） —— synchronized</h1><p>比较容易想到的就是这个关键字了：<strong>synchronized</strong> 。在学校就是这么学的。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 进化的 DateUtil</span><br><span class="line"> * 使用同步块，synchronized</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.SyncDateUtil</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncDateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PATTERN_YMD = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">getFormattedDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(formatter) &#123;</span><br><span class="line"></span><br><span class="line">formatter.applyPattern(PATTERN_YMD);</span><br><span class="line"><span class="function"><span class="keyword">return</span> formatter.<span class="title">format</span><span class="params">(date)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要把线程类 —— ShowDate 的第 30 行的工具类替换一下就行，<em>DateUtil</em> 换成 <em>SyncDateUtil</em> ，即：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//System.out.println(desc + ": " + DateUtil.getFormattedDate(date));</span></span><br><span class="line">System.out.println(<span class="keyword">desc</span> + <span class="string">": "</span> + SyncDateUtil.getFormattedDate(<span class="keyword">date</span>));</span><br></pre></td></tr></table></figure><p>在运行试试！<br>不管执行多少遍，都不会出现前面说的串数据的问题了。</p><h1 id="u89E3_u51B3_u529E_u6CD5_uFF08_u4E8C_uFF09__u2014_u2014_ThreadLocal"><a href="#u89E3_u51B3_u529E_u6CD5_uFF08_u4E8C_uFF09__u2014_u2014_ThreadLocal" class="headerlink" title="解决办法（二） —— ThreadLocal"></a>解决办法（二） —— ThreadLocal</h1><p>除了 <strong>synchronized</strong> 还有 <strong>ThreadLocal</strong> 。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 进化的 DateUtil —— ThreadLocal</span><br><span class="line"> *</span><br><span class="line"> * @author by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.ThreadLocalDateUtil</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PATTERN_YMD = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; formatter = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line"><span class="keyword">protected</span> DateFormat initialValue() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(PATTERN_YMD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String getFormattedDate(Date <span class="keyword">date</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> formatter.get().format(<span class="keyword">date</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ThreadLocal</strong> 还有另一种实现。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 进化的 DateUtil —— ThreadLocal 的另一种实现</span><br><span class="line"> *</span><br><span class="line"> * @author by youngz</span><br><span class="line"> *      on 2016年11月27日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.thread.ThreadLocalDateUtil2</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadLocalDateUtil2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> final <span class="keyword">static</span> String PATTERN_YMD = <span class="string">"yyyy-MM-dd"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;DateFormat&gt; formatter = <span class="keyword">new</span> ThreadLocal&lt;DateFormat&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateFormat <span class="title">getDateFormat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">DateFormat df = formatter.<span class="keyword">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == df) &#123;</span><br><span class="line">df = <span class="keyword">new</span> SimpleDateFormat(PATTERN_YMD);</span><br><span class="line">formatter.<span class="keyword">set</span>(df);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> df;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFormattedDate</span>(<span class="params">Date date</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getDateFormat().format(date);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细代码可参照 <a href="https://github.com/youngzhu/CollectionCode4Java/tree/master/src/org/young/thread" target="_blank" rel="external">https://github.com/youngzhu/CollectionCode4Java/tree/master/src/org/young/thread</a></p><p>参考：<br><a href="http://www.cnblogs.com/doit8791/p/4093808.html" target="_blank" rel="external">http://www.cnblogs.com/doit8791/p/4093808.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么情况下需要关注线程安全问题？&lt;br&gt;就是多个线程会对某个变量同时执行读／写操作的时候。&lt;/p&gt;
&lt;h1 id=&quot;u95EE_u9898&quot;&gt;&lt;a href=&quot;#u95EE_u9898&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Java" scheme="http://youngzy.com/essays/tags/Java/"/>
    
      <category term="thread" scheme="http://youngzy.com/essays/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>当“时光飞逝”如此形象直观</title>
    <link href="http://youngzy.com/essays/2016/11/13/how-time-flies/"/>
    <id>http://youngzy.com/essays/2016/11/13/how-time-flies/</id>
    <published>2016-11-13T03:45:23.000Z</published>
    <updated>2016-11-13T05:11:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201611/time-flies.png" alt="" title="App - Gyroscope 截屏"><br>这界面让人恐惧。年龄这块数字是以毫秒为单位不断变大的。说句“时光飞逝”，无关痛痒，甚至有点洒脱的味道。可是当这四个字如此直观清晰地摆在面前，你却只能眼睁睁地看着，什么也做不了的时候，无力感、恐惧感油然而生……</p><p>对生命保持一种敬畏之心。</p><p>往积极的方面想：随着年龄的增长，阅历、知识、财富等等都在跟着涨。想一想银行账户的余额也跟那个数字似的蹭蹭滴往上涨，是不是就开心多了，心里充满了阳光，生活又变得美好了！</p><p>同样是数字，配合不同的场景会有完全不同的意义，或者说是感触。<br>秒表相信很多人都玩过。就算没用过真正的秒表，手机上的总该用过吧。看着那个数字不停地往上翻，没有什么特别的感觉，就是个计时器而已。<br>但是当看到一个代表自己年龄的数字在不断地变大，有点心慌。</p><p>记得以前看过一段澳大利亚的交通安全宣传片（<a href="http://www.miaopai.com/show/vtvdqPnPm7cmp4Q8PjwZNg__.htm" target="_blank" rel="external">视频链接</a>），一位普通人被告知，当地每年有249人因车祸死亡，在被问及他能接受的死亡人数是多少时，他回答70。刚说完后面涌现出一群人，70个，都是他的家人，妻子、孩子、父母……他立刻对记者改口说：0 个。边抹泪边说 0 个 ……<br>跟自己无关时，几百几千有什么关系？只是一个数字而已。<br>但如果是自己的亲人朋友，数字就不再仅仅是数字，那都代表着一个个鲜活的生命，一个也不愿意失去。</p><p>同样都是数字，在被赋予特定的含义后，就变得完全不一样了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xqxq2.com1.z0.glb.clouddn.com/201611/time-flies.png&quot; alt=&quot;&quot; title=&quot;App - Gyroscope 截屏&quot;&gt;&lt;br&gt;这界面让人恐惧。年龄这块数字是以毫秒为单位不断变大的。说
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring | UnexpectedRollbackException 异常（已解决）</title>
    <link href="http://youngzy.com/essays/2016/11/10/spring-issue-unexpected-rollback-exception/"/>
    <id>http://youngzy.com/essays/2016/11/10/spring-issue-unexpected-rollback-exception/</id>
    <published>2016-11-10T14:40:25.000Z</published>
    <updated>2016-11-10T15:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中遇到了这样的异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only</span><br></pre></td></tr></table></figure><h1 id="u9879_u76EE_u6982_u8981"><a href="#u9879_u76EE_u6982_u8981" class="headerlink" title="项目概要"></a>项目概要</h1><h2 id="u8C03_u7528_u903B_u8F91_uFF1A"><a href="#u8C03_u7528_u903B_u8F91_uFF1A" class="headerlink" title="调用逻辑："></a>调用逻辑：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最外层 Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeAAA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">nestedService.executeBBB();</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// 更新操作日志表</span></span><br><span class="line">updateTblOperationLog(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pulblic <span class="class"><span class="keyword">class</span> <span class="title">NestedService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeBBB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">nestedNestedService.sendMsg();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="function"><span class="keyword">throws</span> new <span class="title">BusinessException</span><span class="params">(e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pulblic <span class="class"><span class="keyword">class</span> <span class="title">NestedNestedService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> BusinessException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="function"><span class="keyword">throws</span> new <span class="title">BusinessException</span><span class="params">(e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="u4E8B_u52A1_u914D_u7F6E"><a href="#u4E8B_u52A1_u914D_u7F6E" class="headerlink" title="事务配置"></a>事务配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">aop:config</span> <span class="attribute">proxy-target-class</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">aop:pointcut</span> <span class="attribute">id</span>=<span class="value">"servicePointcut"</span> </span><br><span class="line"><span class="attribute">expression</span>=<span class="value">"execution(* com.XXX..*service..*(..))"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">aop:advisor</span> <span class="attribute">pointcut-ref</span>=<span class="value">"servicePointcut"</span> <span class="attribute">advice-ref</span>=<span class="value">"txAdvice"</span> <span class="attribute">order</span>=<span class="value">"1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:annotation-driven</span> <span class="attribute">transaction-manager</span> = "<span class="attribute">transactionManager</span>" /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:advice</span> <span class="attribute">id</span>=<span class="value">"txAdvice"</span> <span class="attribute">transaction-manager</span>=<span class="value">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"save*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"add*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"insert*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"update*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"delete*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"validate*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"calculate*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"execute*"</span> <span class="attribute">propagation</span>=<span class="value">"REQUIRED"</span> <span class="attribute">rollback-for</span>=<span class="value">"BusinessException"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"find*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"get*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"load*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">tx:method</span> <span class="attribute">name</span>=<span class="value">"*"</span> <span class="attribute">read-only</span>=<span class="value">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p>出现这种没碰过的问题，第一反应当然就是 Google 了。<br>翻了很多 Blog 和 论坛，也尝试了很多办法，但都失败了。</p><h1 id="u5C1D_u8BD5"><a href="#u5C1D_u8BD5" class="headerlink" title="尝试"></a>尝试</h1><p>原因已经找到：通过查看日志，知道问题是出现在调用 <code>nestedNestedService.sendMsg()</code> 时。由于对方服务不通，导致这个方法出现异常。</p><h2 id="u5C1D_u8BD51"><a href="#u5C1D_u8BD51" class="headerlink" title="尝试1"></a>尝试1</h2><p>总的来说就是事务嵌套的问题。网上说可以为每一个方法都起一个事务，修改事务配置文件：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"execute*"</span> propagation=<span class="string">"REQUIRED"</span> rollback-<span class="keyword">for</span>=<span class="string">"BusinessException"</span>/&gt;</span><br></pre></td></tr></table></figure><p>改为<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"execute*"</span> propagation=<span class="string">"REQUIRES_NEW"</span> rollback-<span class="keyword">for</span>=<span class="string">"BusinessException"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>这个不行，还是会报一样的错误。</p><h2 id="u5C1D_u8BD52"><a href="#u5C1D_u8BD52" class="headerlink" title="尝试2"></a>尝试2</h2><p>考虑到出错的那个方法 <code>sendMsg()</code> 不在事务的预定义里面，属于 <code>*</code> 的范畴。<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"*"</span> read-only=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>改成开启独立事务的模式（挂起前一个，当前方法新起一个事务）：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"*"</span> propagation=<span class="string">"REQUIRES_NEW"</span>/&gt;</span><br></pre></td></tr></table></figure><p>不行。</p><p>改成不用事务的，因为该用事务的前面定义的差不多了：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"*"</span> propagation=<span class="string">"NOT_SUPPORTED"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>还是不行。报错说“事务是必须的”……</p><p>那就改成 <code>SUPPORTS</code> 的吧，意思是有事务就用，没有也没关系</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:<span class="keyword">method</span> name=<span class="string">"*"</span> propagation=<span class="string">"SUPPORTS"</span>/&gt;</span><br></pre></td></tr></table></figure><p>还是不行。跟一开始一样的错。</p><p><code>*</code> 不行，那就专门给以 <strong>send</strong> 开头的方法设置一个。<br>跟上面一样，尝试了 <code>REQUIRES_NEW</code>， <code>NOT_SUPPORTED</code> ，都以失败告终。</p><h1 id="u89E3_u51B3_u529E_u6CD5"><a href="#u89E3_u51B3_u529E_u6CD5" class="headerlink" title="解决办法"></a>解决办法</h1><p>修改配置不行。那就只能从代码入手了。<br>看了这么多资料，做了这么多尝试，问题点差不多找到了：方法 <code>nestedService.executeBBB()</code> 抛出了 <strong>BusinessException </strong> 异常导致的。即使最外层的 Service 的 <code>mainService.executeAAA()</code> 做了 try-catch 也不行。</p><p>由于项目中的 Service 类里有很多 <code>execute</code> 开头的方法，所以不能随意的更改 <code>rollback-for</code> 配置。<br>事务里定义了如果遇到 <code>BusinessException</code> 就回滚。<br>怎样让它不回滚呢？<br><strong>那就新增一个异常类吧。</strong></p><ol><li><p>新增异常类：</p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServiceException</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Exception</span> &#123;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 NestedNestedService 类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pulblic <span class="class"><span class="keyword">class</span> <span class="title">NestedNestedService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//throws new BusinessException(e);</span></span><br><span class="line"><span class="comment">// 直接 throw ，就不再封装了</span></span><br><span class="line"><span class="keyword">throws</span> e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 NestedService 类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pulblic <span class="class"><span class="keyword">class</span> <span class="title">NestedService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeBBB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">nestedNestedService.sendMsg();</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// throws new BusinessException(e);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 换成 ServiceException 异常</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> new <span class="title">ServiceException</span><span class="params">(e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>其实之前都是抱着试试看的态度。<br>问题就这样解决了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目中遇到了这样的异常：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Java" scheme="http://youngzy.com/essays/tags/Java/"/>
    
      <category term="Spring" scheme="http://youngzy.com/essays/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>神奇的递归</title>
    <link href="http://youngzy.com/essays/2016/09/10/amazing-algorithm-01-recursion/"/>
    <id>http://youngzy.com/essays/2016/09/10/amazing-algorithm-01-recursion/</id>
    <published>2016-09-10T08:16:25.000Z</published>
    <updated>2016-09-10T08:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为程序员不知道你有没有过跟我一样的感觉：有些算法的设计真精妙，真神奇！</p><p>举个例子，比如递归。</p><p>先考虑这样的一个程序题：将 1 到 10 依次累加。<br>你会怎么处理？</p><p>最容易想到的办法可能就是循环了。</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// simple loop construct</span><br><span class="line"><span class="keyword">var</span> acc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i)</span><br><span class="line">    acc += i;</span><br><span class="line">alert(acc); // <span class="literal">result</span> <span class="keyword">is</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><p>但如果不用循环呢？<br>还能怎么实现？</p><p>看看下面这块代码：</p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">without</span> loop construct <span class="keyword">or</span> variables (recursion)</span><br><span class="line">function sumRange(start, <span class="keyword">end</span>, acc) &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; <span class="keyword">end</span>)</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    <span class="keyword">return</span> sumRange(start + <span class="number">1</span>, <span class="keyword">end</span>, acc + start)</span><br><span class="line">&#125;</span><br><span class="line">alert(sumRange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0</span>)); // <span class="literal">result</span> <span class="keyword">is</span> also <span class="number">55</span></span><br></pre></td></tr></table></figure><p>这就是递归了。是不是很神奇？！</p><p>作为一个老程序员，写代码或看代码的时候，时不时的会有这样的时候：靠，代码还可以这么写啊，真妙！</p><p>via <a href="https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536?source=linkShare-d1adcd6b754f-1473496939" target="_blank" rel="external">Mdeium</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为程序员不知道你有没有过跟我一样的感觉：有些算法的设计真精妙，真神奇！&lt;/p&gt;
&lt;p&gt;举个例子，比如递归。&lt;/p&gt;
&lt;p&gt;先考虑这样的一个程序题：将 1 到 10 依次累加。&lt;br&gt;你会怎么处理？&lt;/p&gt;
&lt;p&gt;最容易想到的办法可能就是循环了。&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="algorithm" scheme="http://youngzy.com/essays/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>打车打得我心颤</title>
    <link href="http://youngzy.com/essays/2016/09/10/what-i-am-thinking-while-taking-a-taxi/"/>
    <id>http://youngzy.com/essays/2016/09/10/what-i-am-thinking-while-taking-a-taxi/</id>
    <published>2016-09-10T08:06:18.000Z</published>
    <updated>2016-09-10T08:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天打车打得我心惊胆颤。<br>加班加到凌晨三点多。用滴滴叫了个车回去。<br>上车的时候没注意师傅的发型，开着开着看到师傅做了个类似解围巾的动作。动作只看到结尾没看到开头，也只是不小心瞄到了。我就在想：是围巾吗？这天气带围巾？也许是帽子之类的吧？<br>又过了一会儿，我居然看到了披散的长发，一下心就提起来了：一个大男人留这么长的头发，再加上他那沙哑的烟嗓……我这是碰到什么人了？<br>一路提心吊胆。脑海里还不停地盘旋着一个问题：TA到底是男是女？<br>直到我隐约看到她手上涂了指甲才知道，噢，应该是个女的。<br>但还是不太确定，主要是那声音。<br>万一是个男的呢？留长发还涂指甲……同时脑补了一下网络上看过的那些“妖孽”的照片，顿时感觉四周阴深深凉飕飕的。</p><p>后来聊天的过程中知道了，确实是位大姐。</p><p>先入为主，听那声音就认为是个男的。再有我几乎没见过女出租车司机，更没坐过女司机的车，所以……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天打车打得我心惊胆颤。&lt;br&gt;加班加到凌晨三点多。用滴滴叫了个车回去。&lt;br&gt;上车的时候没注意师傅的发型，开着开着看到师傅做了个类似解围巾的动作。动作只看到结尾没看到开头，也只是不小心瞄到了。我就在想：是围巾吗？这天气带围巾？也许是帽子之类的吧？&lt;br&gt;又过了一会儿，我居
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>我穿越了？囧</title>
    <link href="http://youngzy.com/essays/2016/09/01/am-i-in-the-time-machine/"/>
    <id>http://youngzy.com/essays/2016/09/01/am-i-in-the-time-machine/</id>
    <published>2016-09-01T07:45:45.000Z</published>
    <updated>2016-09-10T07:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天一进办公室有点懵 —— 今天大家怎么都到的这么早，几乎都到齐了。平时这时候到的人寥寥无几。难道今天是有什么事情？为什么我没接到通知？望着大家在各自的岗位上忙碌的身影（人影都有的虚），顿时有种手足无措的不真实感。</p><p>直到我打卡的时候，看了一眼时间：9:36……赶紧看了下手表，盯着时针看了一会儿，嗯，是9点多了。</p><p>我以为是8:36……比平时晚了一个小时</p><p>起床时我看了手机。<br>出门前我看了手表。<br>下地铁的时候我也看了时间。</p><p>一切都正常啊。</p><p>现在想来，看时间的时候只注意分了，没注意时。</p><p>想想刚进门那懵的状态还挺有意思的，那感觉挺神奇 —— 有种科幻、穿越的感觉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天一进办公室有点懵 —— 今天大家怎么都到的这么早，几乎都到齐了。平时这时候到的人寥寥无几。难道今天是有什么事情？为什么我没接到通知？望着大家在各自的岗位上忙碌的身影（人影都有的虚），顿时有种手足无措的不真实感。&lt;/p&gt;
&lt;p&gt;直到我打卡的时候，看了一眼时间：9:36……
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo自问自答（Q&amp;A）</title>
    <link href="http://youngzy.com/essays/2016/08/06/Hexo%E8%87%AA%E9%97%AE%E8%87%AA%E7%AD%94/"/>
    <id>http://youngzy.com/essays/2016/08/06/Hexo自问自答/</id>
    <published>2016-08-06T03:32:08.000Z</published>
    <updated>2016-08-06T03:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Q01_3A__u5DF2_u6709_u7684_u535A_u6587_u53EF_u4EE5_u91CD_u547D_u540D_u5417_uFF1F"><a href="#Q01_3A__u5DF2_u6709_u7684_u535A_u6587_u53EF_u4EE5_u91CD_u547D_u540D_u5417_uFF1F" class="headerlink" title="Q01: 已有的博文可以重命名吗？"></a>Q01: 已有的博文可以重命名吗？</h2><p>A : 可以。只要修改 <code>source/_posts/xx.md</code> 文件里的 <code>title</code> 即可。</p><blockquote><p>注意：改MD的文件名是不行的。</p></blockquote><h2 id="Q02_3A__u5982_u4F55_u8BBE_u7F6E_u591A_u6807_u7B7E"><a href="#Q02_3A__u5982_u4F55_u8BBE_u7F6E_u591A_u6807_u7B7E" class="headerlink" title="Q02: 如何设置多标签"></a>Q02: 如何设置多标签</h2><p>A : <code>[tag1, tag2, tag3]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Q01_3A__u5DF2_u6709_u7684_u535A_u6587_u53EF_u4EE5_u91CD_u547D_u540D_u5417_uFF1F&quot;&gt;&lt;a href=&quot;#Q01_3A__u5DF2_u6709_u7684_u535A_u6587_u53
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Hexo" scheme="http://youngzy.com/essays/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>长那么帅情商还那么高，怎搞？</title>
    <link href="http://youngzy.com/essays/2016/08/06/hey-man-what-can-we-do-if-you/"/>
    <id>http://youngzy.com/essays/2016/08/06/hey-man-what-can-we-do-if-you/</id>
    <published>2016-08-06T02:27:40.000Z</published>
    <updated>2016-08-06T03:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>一期的《跨界歌王》让我更喜欢王凯了。</p><h2 id="u4F1A_u804A_u5929"><a href="#u4F1A_u804A_u5929" class="headerlink" title="会聊天"></a>会聊天</h2><p>在下面试唱的时候音比较低（人家本来就号称<strong>低音炮</strong>），评委嘉宾就说：你这音再高一点就好了。<br>王凯接着道：如果老师能让我升上去，我的调也一定能升上去。<br>高晓松听了直拍手：嗷……，情商太高了，快！快按呐！</p><p>这里简单介绍一下节目的规则（看过节目的请忽略）：在舞台的正下方有个所谓的试音间的地方，每位歌手得在这里试唱几句，如果评委觉得OK了，就按中间的红色按钮，演员通过升降机到达舞台。否则就不能进行表演。</p><h2 id="u6709_u793C_u8C8C"><a href="#u6709_u793C_u8C8C" class="headerlink" title="有礼貌"></a>有礼貌</h2><p>另一位评委宋柯在王凯演唱完后评价说：我真要祝贺她们（嗨叫的女粉丝）找了个“好老公”，我就说一个细节，王凯是到目前为止第一个在演唱完了向乐队致意的。</p><h2 id="u4F53_u8D34_uFF08Gentleman_uFF09"><a href="#u4F53_u8D34_uFF08Gentleman_uFF09" class="headerlink" title="体贴（Gentleman）"></a>体贴（Gentleman）</h2><p>我最在意的是另一件事 — 让我感叹：这做得真漂亮！这情商真是高啊！</p><p>主持人在开场介绍王凯时就表达了对他的喜爱。等他演唱完回到舞台上时先问王凯：我可以抱你一下吗？王凯还没答，底下众多的女粉就一遍遍地喊：不可以。<br>这时主持人就转向了观众，有点商量甚至哀求的语气问道：就抱一下，一下也不行吗？<br>底下还是一个劲地摇头。<br>这时王凯对她说：我听见她们说可以。<br>主持人听了很开心，跟他抱了一下。<br>抱完，王凯又回过来对他的粉丝说：我知道你们是最乖的。</p><p>做得多地道！多漂亮！既不伤主持人（女）的面子，又顾及粉丝的感受。</p><p>想想如果你是那个主持人你该怎么办？<br>不管底下粉丝的反对，我就是要抱，你们咬我啊？<br>还是顺从粉丝？算了，就不抱了吧？</p><p>第一种，很 low。<br>第二种很没面子。</p><p>王凯的一个“谎言”解决了。<br>这个谎撒的漂亮！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一期的《跨界歌王》让我更喜欢王凯了。&lt;/p&gt;
&lt;h2 id=&quot;u4F1A_u804A_u5929&quot;&gt;&lt;a href=&quot;#u4F1A_u804A_u5929&quot; class=&quot;headerlink&quot; title=&quot;会聊天&quot;&gt;&lt;/a&gt;会聊天&lt;/h2&gt;&lt;p&gt;在下面试唱的时候音比较低
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Eclipse | 同步时报 cannot open git-upload-pack（已解决）</title>
    <link href="http://youngzy.com/essays/2016/07/27/eclipse-issue-cannot-open-git-upload-pack/"/>
    <id>http://youngzy.com/essays/2016/07/27/eclipse-issue-cannot-open-git-upload-pack/</id>
    <published>2016-07-27T14:48:05.000Z</published>
    <updated>2016-07-27T15:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Eclipse 中使用 egit 同步 GitHub 上的代码时报错：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//github.<span class="keyword">com</span>/YoungZHU/CollectionCode4Java.gi<span class="variable">t:</span> cannot <span class="keyword">open</span> git-upload-pack</span><br></pre></td></tr></table></figure><p>网上翻了下，原来加一个配置就行了。</p><p>打开 Eclipse，在工具栏中依次点开 Windows–&gt;Preferences–&gt;Team–&gt;Git–&gt;Configuration–&gt;User Settings，然后点 Add Entry 新建一个键值对，<br>Key <code>http.sslVerify</code><br>Value <code>false</code></p><p>如图：</p><p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607egit.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Eclipse 中使用 egit 同步 GitHub 上的代码时报错：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="TOOLS" scheme="http://youngzy.com/essays/categories/TOOLS/"/>
    
    
      <category term="Eclipse" scheme="http://youngzy.com/essays/tags/Eclipse/"/>
    
      <category term="egit" scheme="http://youngzy.com/essays/tags/egit/"/>
    
      <category term="git" scheme="http://youngzy.com/essays/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>从 Hibernate 3 升级到 Hibernate 4 序列号（Sequence）不能用 String 了？（已解决）</title>
    <link href="http://youngzy.com/essays/2016/07/24/hibernate-issue-how-to-use-string-type-sequence-in-hibernate4/"/>
    <id>http://youngzy.com/essays/2016/07/24/hibernate-issue-how-to-use-string-type-sequence-in-hibernate4/</id>
    <published>2016-07-24T03:01:19.000Z</published>
    <updated>2016-07-24T03:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 Hibernate 3 升级到 Hibernate 4 ，出现了这样的错误：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org<span class="class">.hibernate</span><span class="class">.id</span><span class="class">.IdentifierGenerationException</span>: Unknown integral data type <span class="keyword">for</span> ids : java<span class="class">.lang</span><span class="class">.String</span></span><br><span class="line">at org<span class="class">.hibernate</span><span class="class">.id</span><span class="class">.IdentifierGeneratorHelper</span><span class="class">.getIntegralDataTypeHolder</span>(IdentifierGeneratorHelper<span class="class">.java</span>:<span class="number">215</span>)</span><br><span class="line">at org<span class="class">.hibernate</span><span class="class">.id</span><span class="class">.SequenceGenerator</span><span class="class">.buildHolder</span>(SequenceGenerator<span class="class">.java</span>:<span class="number">150</span>)</span><br><span class="line">at org<span class="class">.hibernate</span><span class="class">.id</span><span class="class">.SequenceGenerator</span><span class="class">.generateHolder</span>(SequenceGenerator<span class="class">.java</span>:<span class="number">126</span>)</span><br><span class="line">at org<span class="class">.hibernate</span><span class="class">.id</span><span class="class">.SequenceGenerator</span><span class="class">.generate</span>(SequenceGenerator<span class="class">.java</span>:<span class="number">116</span>)</span><br><span class="line">at org<span class="class">.hibernate</span><span class="class">.event</span><span class="class">.internal</span><span class="class">.AbstractSaveEventListener</span><span class="class">.saveWithGeneratedId</span>(AbstractSaveEventListener<span class="class">.java</span>:<span class="number">118</span>)</span><br></pre></td></tr></table></figure><p>原来，在 Hibernate 4 中如果主键的生成策略是 Sequence ，则要求数据库中对应的字段必须为数字（Number，Long 等）类型。<br>而当前系统中使用的是字符串类型，所以报错了。</p><p>网上参考了几篇文章，就一篇（见文末）还不错。在此基础上，覆写了部分方法，解决了问题。</p><h2 id="u9996_u5148_u662F_HISequenceGenerator__u7C7B"><a href="#u9996_u5148_u662F_HISequenceGenerator__u7C7B" class="headerlink" title="首先是 HISequenceGenerator 类"></a>首先是 HISequenceGenerator 类</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package org.young.hibernate.common;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">import org.hibernate.engine.spi.SessionImplementor;</span><br><span class="line">import org.hibernate.id.IntegralDataTypeHolder;</span><br><span class="line">import org.hibernate.id.SequenceGenerator;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 继承 hibernate 里的 SequenceGenerator 类，</span><br><span class="line"> <span class="keyword">*</span> 覆写2个方法：</span><br><span class="line"> <span class="keyword">*</span> 1. buildHolder()</span><br><span class="line"> <span class="keyword">*</span> 2. generate(SessionImplementor session, Object obj)</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author by youngz</span></span><br><span class="line"> <span class="keyword">*</span>      on 2016年7月24日</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> Package&amp;FileName: org.young.hibernate.common.HISequenceGenerator</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">public class HISequenceGenerator extends SequenceGenerator &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line">public Serializable generate(SessionImplementor session, Object obj) &#123;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 源码</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> return generateHolder(session).makeValue();</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">//Serializable id = generateHolder(session).makeValue();</span><br><span class="line">Number id = generateHolder(session).makeValue();</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 笔者曾自作聪明地以为可以省掉这一步，</span><br><span class="line"> <span class="keyword">*</span> 继而这个方法就不用覆写，毕竟都是 Serializable ，</span><br><span class="line"> <span class="keyword">*</span> 不管是数字（Number）还是字符串（String）</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> 但返回值却需要确定到String，因为Java类（hbm对象）的属性是String类型的</span><br><span class="line"> <span class="keyword">*</span> 而 makeValue() 返回的 Number （这里的实际类型是 Long）</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> 所以 id 的类型直接定义成 Number （更直观），</span><br><span class="line"> <span class="keyword">*</span> 而不是 Serializable</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">        if (getIdentifierType().getReturnedClass() == String.class)&#123;</span><br><span class="line">        //增加对String的判断</span><br><span class="line">            return id.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">@Override</span></span><br><span class="line">protected IntegralDataTypeHolder buildHolder() &#123;</span><br><span class="line">/<span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> 源码</span><br><span class="line"> <span class="keyword">*</span> </span><br><span class="line"> <span class="keyword">*</span> return IdentifierGeneratorHelper.getIntegralDataTypeHolder(this.identifierType.getReturnedClass());</span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">return HIIdentifierGeneratorHelper</span><br><span class="line">.getIntegralDataTypeHolder(getIdentifierType()</span><br><span class="line">.getReturnedClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="u8FD8_u6709_u4E00_u4E2A_u8F85_u52A9_u7C7B_HIIdentifierGeneratorHelper"><a href="#u8FD8_u6709_u4E00_u4E2A_u8F85_u52A9_u7C7B_HIIdentifierGeneratorHelper" class="headerlink" title="还有一个辅助类 HIIdentifierGeneratorHelper"></a>还有一个辅助类 HIIdentifierGeneratorHelper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.young.hibernate.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.id.IdentifierGenerationException;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.id.IdentifierGeneratorHelper;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.id.IntegralDataTypeHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * IdentifierGeneratorHelper ，final 类，不可继承</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> by youngz</span><br><span class="line"> *      on 2016年7月24日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.hibernate.common.HIIdentifierGeneratorHelper</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HIIdentifierGeneratorHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IntegralDataTypeHolder <span class="title">getIntegralDataTypeHolder</span><span class="params">(</span><br><span class="line">Class integralType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((integralType == Long.class) || (integralType == Integer.class)</span><br><span class="line">|| (integralType == Short.class)</span><br><span class="line"><span class="comment">// 增加对String的判断</span></span><br><span class="line">|| (integralType == String.class)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HIBasicHolder(integralType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (integralType == BigInteger.class)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdentifierGeneratorHelper.BigIntegerHolder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (integralType == BigDecimal.class) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IdentifierGeneratorHelper.BigDecimalHolder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IdentifierGenerationException(</span><br><span class="line"><span class="string">"Unknown integral data type for ids : "</span></span><br><span class="line">+ integralType.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HIBasicHolder</span> <span class="keyword">implements</span> <span class="title">IntegralDataTypeHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class exactType;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HIBasicHolder</span><span class="params">(Class exactType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.exactType = exactType;</span><br><span class="line"><span class="keyword">if</span> ((exactType != Long.class) &amp;&amp; (exactType != Integer.class)</span><br><span class="line">&amp;&amp; (exactType != Short.class)</span><br><span class="line"><span class="comment">// 增加对String的判断</span></span><br><span class="line">&amp;&amp; (exactType != String.class)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IdentifierGenerationException(</span><br><span class="line"><span class="string">"Invalid type for basic integral holder : "</span> + exactType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getActualLongValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">initialize</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">initialize</span><span class="params">(ResultSet resultSet,</span><br><span class="line"><span class="keyword">long</span> defaultValue)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> value = resultSet.getLong(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (resultSet.wasNull())</span><br><span class="line">value = defaultValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> initialize(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> position)</span></span><br><span class="line"><span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">preparedStatement.setLong(position, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">this</span>.value += <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkInitialized</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="number">0L</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IdentifierGenerationException(</span><br><span class="line"><span class="string">"integral holder was not initialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">add</span><span class="params">(<span class="keyword">long</span> addend)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">this</span>.value += addend;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">this</span>.value -= <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">subtract</span><span class="params">(<span class="keyword">long</span> subtrahend)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">this</span>.value -= subtrahend;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">multiplyBy</span><span class="params">(IntegralDataTypeHolder factor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> multiplyBy(IdentifierGeneratorHelper.extractLong(factor));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">multiplyBy</span><span class="params">(<span class="keyword">long</span> factor)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">this</span>.value *= factor;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">eq</span><span class="params">(IntegralDataTypeHolder other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> eq(IdentifierGeneratorHelper.extractLong(other));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">eq</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.value == value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lt</span><span class="params">(IntegralDataTypeHolder other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> lt(IdentifierGeneratorHelper.extractLong(other));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lt</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.value &lt; value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">gt</span><span class="params">(IntegralDataTypeHolder other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gt(IdentifierGeneratorHelper.extractLong(other));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">gt</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.value &gt; value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> IntegralDataTypeHolder <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HIBasicHolder copy = <span class="keyword">new</span> HIBasicHolder(<span class="keyword">this</span>.exactType);</span><br><span class="line">copy.value = <span class="keyword">this</span>.value;</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Number <span class="title">makeValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">checkInitialized();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.exactType == Long.class)</span><br><span class="line"><span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加对String的判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.exactType == String.class) &#123;</span><br><span class="line"><span class="keyword">return</span> Long.valueOf(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.exactType == Integer.class) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.valueOf((<span class="keyword">int</span>) <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Short.valueOf((<span class="keyword">short</span>) (<span class="keyword">int</span>) <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Number <span class="title">makeValueThenIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Number result = makeValue();</span><br><span class="line"><span class="keyword">this</span>.value += <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Number <span class="title">makeValueThenAdd</span><span class="params">(<span class="keyword">long</span> addend)</span> </span>&#123;</span><br><span class="line">Number result = makeValue();</span><br><span class="line"><span class="keyword">this</span>.value += addend;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"BasicHolder["</span> + <span class="keyword">this</span>.exactType.getName() + <span class="string">"["</span> + <span class="keyword">this</span>.value</span><br><span class="line">+ <span class="string">"]]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((o == <span class="keyword">null</span>) || (<span class="keyword">super</span>.getClass() != o.getClass())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HIBasicHolder that = (HIBasicHolder) o;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.value == that.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (<span class="keyword">this</span>.value ^ <span class="keyword">this</span>.value &gt;&gt;&gt; <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="u6700_u540E_uFF0C_u4FEE_u6539_hibernate__u914D_u7F6E_u6587_u4EF6_u91CC_u7684_u4E3B_u952E_u751F_u6210_u7B56_u7565"><a href="#u6700_u540E_uFF0C_u4FEE_u6539_hibernate__u914D_u7F6E_u6587_u4EF6_u91CC_u7684_u4E3B_u952E_u751F_u6210_u7B56_u7565" class="headerlink" title="最后，修改 hibernate 配置文件里的主键生成策略"></a>最后，修改 hibernate 配置文件里的主键生成策略</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">id</span> <span class="attribute">name</span>=<span class="value">"id"</span> <span class="attribute">type</span>=<span class="value">"java.lang.String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">column</span> <span class="attribute">name</span>=<span class="value">"ID"</span> <span class="attribute">length</span>=<span class="value">"20"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处的 class 即刚刚新建的 Generator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">generator</span> <span class="attribute">class</span>=<span class="value">"org.young.hibernate.common.HISequenceGenerator"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">param</span> <span class="attribute">name</span>=<span class="value">"sequence"</span>&gt;</span>SEQ_ID<span class="tag">&lt;/<span class="title">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">id</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>本文的实验是在 <code>hibernate-core-4.1.8.Final.jar</code> 基础上完成。<br>可至 <a href="https://github.com/youngzhu/CollectionCode4Java/tree/master/src/org/young/hibernate/common" target="_blank" rel="external">GitHub</a> 上查看相关代码。</p></blockquote><h3 id="u53C2_u8003_uFF1A"><a href="#u53C2_u8003_uFF1A" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://my.oschina.net/liyuj/blog/386582?fromerr=4h5OjIKZ" target="_blank" rel="external">http://my.oschina.net/liyuj/blog/386582?fromerr=4h5OjIKZ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 Hibernate 3 升级到 Hibernate 4 ，出现了这样的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Java" scheme="http://youngzy.com/essays/tags/Java/"/>
    
      <category term="hibernate" scheme="http://youngzy.com/essays/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>想要看个原版（正版）英文书怎么就这么难呢？</title>
    <link href="http://youngzy.com/essays/2016/07/17/how-did-i-get-a-book-via-itunes-gift-card/"/>
    <id>http://youngzy.com/essays/2016/07/17/how-did-i-get-a-book-via-itunes-gift-card/</id>
    <published>2016-07-17T06:24:03.000Z</published>
    <updated>2016-08-06T02:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>二爷（公众号：二爷荐书）在朋友圈推荐了一本书，我也想看看。<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook01.PNG" alt=""><br>第一时间想到了Kindle，一搜，没有。我怀疑是不是跟地区有关。于是到<a href="https://www.amazon.com/" target="_blank" rel="external">Amazon.com</a> 上找了，果然有，但也只有平装版（Paperback）没有电子版。<br>接着想到，不是还有iBooks么，一搜，果然有。<br>但是看到 $17.99 的标价，我犹豫了。<br>看到有样张（SAMPLE），那就先看一下里面的内容吧，结果点击下载时弹出了这个提示：<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook02.PNG" alt=""><br>这才意识到我手机上iTunes用的是美区的账号。<br>那就到电脑上看看吧。<br>居然没搜到。<br>怎么会这样呢？我又试着点了其他的，例如“精品推荐”等，它提示<strong>iBooks Store不可用</strong>。我猜，是网络问题吧。毕竟，用过iCloud和App Store的都知道……<br>Apple不给我们想办法，只有我们自己想了 —— 多试几次。<br>结果还是不行。这时脑海中突然蹦出了之前看到过的新闻：iBooks退出中国市场了。之前只是看了标题，也没太关注。现在知道，应该是真的。<br>那就到美区买吧！<br>付款的时候又遇到了问题：没钱。我的美区账号没有绑定信用卡，当然我也没有美区信用卡。<br>看着那一连串的支付方式，我眼前一亮：PayPal。这个我有啊。赶紧关联一下，结果<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook03.png" alt=""></p><p>现在该怎么办呢？<br>想起来之前某个公众号好像说过这类事情，那就到微信上搜看看吧。<br>还真有（链接见文末）。里面提到“可以通过 <a href="https://www.paypal-gifts.com/" target="_blank" rel="external">PayPal Digital Gifts</a> 商店、Amazon 等<strong>靠谱的</strong>电商来购买 iTunes Gift Card。”<br>又看到了熟悉的PayPal。那就买呗。<br>结果<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook04.PNG" alt=""></p><p>哎……</p><p>我又用Google搜索了“iTunes Gift Card”，结果是很多，可我也不会辨别真伪啊。<br>想起之前的文章里说的要找<strong>靠谱的</strong>，没办法了。那就Amazon吧。<br>于是我又注册了一个Amazon美区的账号，之前的一个是中区的（.cn)。<br>看了下，一张25刀的卡，售价是 26刀 ＋ 4.99刀的运费（shipping)。<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook05.PNG" alt=""><br>WTF，一张电子卡要什么运费啊。<br>还是说，在美国，人家真的寄给你一张卡片啊？<br>不懂，就不多说了。</p><p>在Amazon点点点的过程中，它跳到了另外一个网站，<a href="http://www.itunescarddelivery.com/" target="_blank" rel="external">http://www.itunescarddelivery.com/</a> 。点进去看了看，可以选择PayPal支付。25刀的卡，售价28.99刀，比Amazon略便宜。买一个吧，买一张25刀的，因为那本书就要18刀。跳转到PayPal页面时，看到了我的信用卡的信息，我也点了确认，接下来又跳回原网站，要求填写个人信息（邮箱／姓名／电话等），填写完提交，没什么反应，没有什么明显的提示，没说成功还是失败。试了几次都是这样。<br>我也回到PayPal里看了，并没有消费记录。<br>是不是也要注册个账号？？<br>之前一些网站的购物经历，在支付时要求登录该网站的，也就是说要有对应的账号。但这个网站在我选择PayPal支付后没有提示要我登录或创建账号之类的信息。</p><p>申请个账号试试吧，又不花钱。<br><strong>注册完账号</strong>后再进行购买，果然可以了（新用户优惠1刀）。<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook06.PNG" alt=""><br>可是，可是接着我又收到了这样一封邮件：<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook07.PNG" alt=""></p><p>这让我有点抗拒。<br>可是钱已经付了，能退回来么？<br>再想想，就是一张照片嘛。那些社交网站上的头像不也是给人看的么？！<br>于是我选择了第一种方式，拍了张照片，回复了邮件。很快，收到了回复，说是验证通过。接着又是一封邮件，就是iTunes Gift Card了，一个PDF附件。<br>扫码兑换，果然成功了。接着购买书籍，一切顺利。这就是那本书了：<br><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook08.jpg" alt=""></p><blockquote><p>事后想想，我为什么信任iTunesCardDelivery网站？<br>其实谈不上信任。我只是信任PayPal。即使在网站上关联了PayPal，它也不会任由网站扣钱吧。至于本次消费，权当买个教训吧！</p></blockquote><hr><p>最后，再说一句：国外的书真是贵！买过最贵的书就是两本英文书了，一个是 <em>ZERO TO ONE</em>，纸质书，HK$ 180，香港机场买的；另一本就是这个了。计算机类的大部头书（翻译版）也是比不上的。当然，我猜原版也是“挺吓人的”。<br>不敢说国外有多尊重知识产权，因为不了解其中的门门道道。不过从定价来看，还是挺重视知识产出的。不管受益方有哪些，作者肯定是其中之一。<br>还有一点，国外的纸质书和电子书的价格差不多。不是太理解这个，纸质书至少还有个印刷吧？还有仓库，还有书架。</p><h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://sspai.com/34751" target="_blank" rel="external">如何购买 iTunes Gift Card</a></li><li><a href="http://sspai.com/26641" target="_blank" rel="external">如何兑换 iTunes 礼品卡/兑换码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;二爷（公众号：二爷荐书）在朋友圈推荐了一本书，我也想看看。&lt;br&gt;&lt;img src=&quot;http://7xqxq2.com1.z0.glb.clouddn.com/201607eBook01.PNG&quot; alt=&quot;&quot;&gt;&lt;br&gt;第一时间想到了Kindle，一搜，没有。我怀疑是不是
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="iTunesGiftCard" scheme="http://youngzy.com/essays/tags/iTunesGiftCard/"/>
    
  </entry>
  
  <entry>
    <title>Java | 原来 serialVersionUID 的用处在这里</title>
    <link href="http://youngzy.com/essays/2016/05/29/why-use-serial-version-uid/"/>
    <id>http://youngzy.com/essays/2016/05/29/why-use-serial-version-uid/</id>
    <published>2016-05-29T13:57:10.000Z</published>
    <updated>2016-05-29T14:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直不太明白Java对象里 <strong>serialVersionUID</strong> 字段是做什么用的。<br>有或者没有，它们之间有差别吗？除了Eclipse里提示的那个黄色的警告。</p><p>今天终于知道，原来是在对象序列化这块有作用。</p><p>看个例子。</p><p>有这样一个对象 User </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String username;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String gender;</span><br><span class="line">Date regDay;</span><br><span class="line"><span class="keyword">boolean</span> martialStatus;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", age="</span> + age + <span class="string">", gender="</span> + gender + <span class="string">", regDay="</span> + regDay</span><br><span class="line">+ <span class="string">", martialStatus="</span> + martialStatus + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在将这个对象序列化存储到硬盘上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWriteObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">user.username = <span class="string">"Jack"</span>;</span><br><span class="line">user.password = <span class="string">"1234567"</span>;</span><br><span class="line">user.age = <span class="number">20</span>;</span><br><span class="line">user.gender = <span class="string">"male"</span>;</span><br><span class="line">user.regDay = <span class="keyword">new</span> Date();</span><br><span class="line">user.martialStatus = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件的后缀名不影响，无论是 txt，io，甚至是没有后缀</span></span><br><span class="line">ObjectSerialize.writeObject(user, <span class="string">"d:\\tmp\\obj"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注： ObjectSerialize 是笔者自己封装的简单的对对象序列化存取的工具类。<br>下同。</p></blockquote><p>从对应的文件中读取对象信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = (User) ObjectSerialize.readObject(<span class="string">"d:\\tmp\\obj"</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前为止都是正常的。能够存储对象，也能够正确地读取对象信息。</p><p>假如，User对象又新增了一个国籍（nationality）字段，新的User类如下（主要差别是在第 8 行的新增字段）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String username;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String gender;</span><br><span class="line">Date regDay;</span><br><span class="line"><span class="keyword">boolean</span> martialStatus;</span><br><span class="line">String nationality; <span class="comment">// 新增的字段</span></span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", age="</span> + age + <span class="string">", gender="</span> + gender + <span class="string">", regDay="</span> + regDay</span><br><span class="line">+ <span class="string">", martialStatus="</span> + martialStatus + <span class="string">", nationality="</span> + nationality + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再去读区原来的对象文件，你会得到一个异常信息：</p><font color="red"><code>java.io.InvalidClassException: org.young.elearn.io.User; local class incompatible: stream classdesc serialVersionUID = 7967476135812239100, local class serialVersionUID = 905986497687499238</code></font><p><strong>serialVersionUID</strong> 的问题！！！<br>文件里存储的User对象的 <strong>serialVersionUID</strong> 跟当前的User对象（User.class）的 <strong>serialVersionUID</strong> 不一致。因为如果一个Java对象没有指定 <strong>serialVersionUID</strong> ，那么系统（JVM）动态地指定一个。</p><p>为了解决这个问题，只要在定义User对象时指定 <strong>serialVersionUID</strong> 就可以了，即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7967476135812239100L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// same code as before</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细的代码可参考：<a href="https://github.com/youngzhu/CollectionCode4Java/blob/master/test/org/young/elearn/io/ObjectSerializeTest.java" target="_blank" rel="external">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直不太明白Java对象里 &lt;strong&gt;serialVersionUID&lt;/strong&gt; 字段是做什么用的。&lt;br&gt;有或者没有，它们之间有差别吗？除了Eclipse里提示的那个黄色的警告。&lt;/p&gt;
&lt;p&gt;今天终于知道，原来是在对象序列化这块有作用。&lt;/p&gt;
&lt;p&gt;看个
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Java" scheme="http://youngzy.com/essays/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java | 原来 try 还可以这样用啊？！</title>
    <link href="http://youngzy.com/essays/2016/05/29/example-of-try-with-resources-statement/"/>
    <id>http://youngzy.com/essays/2016/05/29/example-of-try-with-resources-statement/</id>
    <published>2016-05-29T13:53:04.000Z</published>
    <updated>2016-05-29T14:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>习惯了这样的try：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了这样的try，觉得有点神奇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来这还有个专业术语， <strong>try-with-resources statement</strong> ，它会自动关闭括号内的资源（resources），不用手动添加代码 <code>xx.close();</code>了。</p><p>看个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.young.elearn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * try-with-resources 的使用</span><br><span class="line"> * try(resouces)</span><br><span class="line"> * &#123;</span><br><span class="line"> * </span><br><span class="line"> * &#125; catch (Exception e)&#123;&#125;</span><br><span class="line"> * </span><br><span class="line"> * 这里的resource会自动关闭</span><br><span class="line"> * </span><br><span class="line"> * 1. resource 必须继承自 java.lang.AutoCloseable</span><br><span class="line"> * 2. 定义和赋值必须都在try里完成</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> by Young.ZHU</span><br><span class="line"> *      on 2016年5月29日</span><br><span class="line"> *</span><br><span class="line"> * Package&amp;FileName: org.young.elearn.TryWithResourcesTest</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryWithResourcesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 验证一下资源是不是真的关闭了</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (MyResources mr = <span class="keyword">new</span> MyResources()) &#123;</span><br><span class="line"><span class="comment">//mr.doSomething(4);</span></span><br><span class="line">mr.doSomething(<span class="number">9</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 编译错误：</span><br><span class="line"> * The resource f of a try-with-resources statement cannot be assigned</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> (FileOutputStream f = <span class="keyword">null</span>;) &#123;</span><br><span class="line"><span class="comment">//f = new FileOutputStream(new File(""));</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 编译错误：</span><br><span class="line"> * The resource type File does not implement java.lang.AutoCloseable</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*try (File file = new File("d:\\xx.txt");) &#123;</span><br><span class="line"></span><br><span class="line">&#125; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResources</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"resources are closed."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"it's OK."</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Enter an even."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后使用 InputStream，OutputStream 之类的就方便一点了，具体可参考另一个例子：<a href="https://github.com/youngzhu/CollectionCode4Java/blob/master/src/org/young/elearn/str/io/ObjectSerialize.java" target="_blank" rel="external">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;习惯了这样的try：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="TECH" scheme="http://youngzy.com/essays/categories/TECH/"/>
    
    
      <category term="Java" scheme="http://youngzy.com/essays/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>《太阳的后裔》动人的N个瞬间</title>
    <link href="http://youngzy.com/essays/2016/04/17/touching-scenes-of-the-descendants-of-sun/"/>
    <id>http://youngzy.com/essays/2016/04/17/touching-scenes-of-the-descendants-of-sun/</id>
    <published>2016-04-17T14:51:27.000Z</published>
    <updated>2016-04-17T15:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>《太阳的后裔》终于 <strong>追</strong> 完了。<br>认真算起来，这应该算是我追的第一部剧，还是韩剧。<br>不管看小说还是电视剧，我喜欢看“完结版”的。</p><p>以前喜欢看一些曝出剧中的穿帮镜头的小视频，没别的意思，就图一乐。<br>可这部剧的所谓穿帮镜头的视频愣是没看。<br><strong>真正喜欢一部剧就是连那些穿帮镜头都不忍去看，生怕破坏心中的美好。</strong></p><p>这部戏真的不错，画面唯美不多说，有幽默搞笑的剧情，也有很多打动人的细节。</p><h2 id="u4F60_u7ED9_u7684_uFF0C_u5C31_u662F_u6211_u8981_u7684"><a href="#u4F60_u7ED9_u7684_uFF0C_u5C31_u662F_u6211_u8981_u7684" class="headerlink" title="你给的，就是我要的"></a>你给的，就是我要的</h2><p>第 4 集，男主被关禁闭，女主偷偷去见他，临走时给了他一盘蚊香。男主说：这正是他最需要的。这时镜头转到仓库（被关禁闭的地方）的货架上：满满的蚊香。</p><p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201604%2Fsun01.png" alt=""></p><h2 id="u8C22_u8C22_u7684_u65B9_u5F0F_u6709_u5F88_u591A_u79CD"><a href="#u8C22_u8C22_u7684_u65B9_u5F0F_u6709_u5F88_u591A_u79CD" class="headerlink" title="谢谢的方式有很多种"></a>谢谢的方式有很多种</h2><p>第 6 集，地震后，当女主替一位外国友人处理好伤势准备离开的时候，伤者拉住了她的衣角，接着就看到他脱下了自己的靴子，示意女主穿上。女主穿的是凉鞋，脚上也有血渍。<br>凉鞋本来是高跟鞋，鞋跟之前被女主霸气地敲掉了。</p><p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201604%2Fsun02.png" alt=""></p><h2 id="u770B_u5230_u4F60_u6CA1_u4E8B_uFF0C_u6211_u5C31_u653E_u5FC3_u4E86"><a href="#u770B_u5230_u4F60_u6CA1_u4E8B_uFF0C_u6211_u5C31_u653E_u5FC3_u4E86" class="headerlink" title="看到你没事，我就放心了"></a>看到你没事，我就放心了</h2><p>还是第 6 集，这集的最后男主从韩国赶过来救援。刚下飞机的时候，他们没有像很多剧的男女主角奔跑着来个拥抱，他们只是深情地注视着对方，中间隔着正向男主敬礼的驻防当地的军人。就这么默默地各自注视着，没有言语，也没有多余的动作。不一会儿，来了一个人向女主求救，说是他的同事需要救援，女主走之前，转头看了男主一眼，只是看了一眼，然后义无反顾地走了，走向了需要她帮助的人。<br>最后的最后，女主在走路，发现鞋带掉了（就是之前外国友人送的那双鞋），就蹲下系鞋带，这时男主出现了，帮她系好了鞋带，互相问候，然后插肩而过，各忙各的事情去了。一个医生，一个军人，在这震后的灾区，有着不同的使命。</p><p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201604%2Fsun03.png" alt=""></p><h2 id="u505A_u81EA_u5DF1_u8BE5_u505A_u7684_uFF0C_u4E0D_u7BA1_u522B_u4EBA_u770B_u5230_u8FD8_u662F_u770B_u4E0D_u5230"><a href="#u505A_u81EA_u5DF1_u8BE5_u505A_u7684_uFF0C_u4E0D_u7BA1_u522B_u4EBA_u770B_u5230_u8FD8_u662F_u770B_u4E0D_u5230" class="headerlink" title="做自己该做的，不管别人看到还是看不到"></a>做自己该做的，不管别人看到还是看不到</h2><p>第 15 集，以为男主牺牲了，男主的父亲接过司令官递过来的遗书伤心地低着头流着泪。这时司令官敬礼了。即使对方看不到。<br>有些事不是因为别人看的见才去做。<br>有些事是为自己做的，是应该做的。而不是为了做给别人看的。</p><p><img src="http://7xqxq2.com1.z0.glb.clouddn.com/201604%2Fsun04.png" alt=""></p><hr><p>最后再说一句：第二女主尹明珠也好漂亮啊。第一次出场没觉得，也许是发型的问题。之后的出场都换成了短发，越看越漂亮，都快超过宋慧乔了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《太阳的后裔》终于 &lt;strong&gt;追&lt;/strong&gt; 完了。&lt;br&gt;认真算起来，这应该算是我追的第一部剧，还是韩剧。&lt;br&gt;不管看小说还是电视剧，我喜欢看“完结版”的。&lt;/p&gt;
&lt;p&gt;以前喜欢看一些曝出剧中的穿帮镜头的小视频，没别的意思，就图一乐。&lt;br&gt;可这部剧的所谓
      
    
    </summary>
    
      <category term="随笔" scheme="http://youngzy.com/essays/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="影视剧" scheme="http://youngzy.com/essays/tags/%E5%BD%B1%E8%A7%86%E5%89%A7/"/>
    
  </entry>
  
</feed>
